{"version":3,"sources":["../../../src/@ionic-native/plugins/media-capture/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,eAAA,EAAiB,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AACzF,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAgH7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BG;AASH,IAAa,YAAY;IAAS,gCAAiB;IAAnD;;IAwFA,CAAC;IAlEC;;;;OAIG;IAIH,mCAAY,GAAZ,UAAa,OAA6B;QACxC,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAIH,mCAAY,GAAZ,UAAa,OAA6B;QACxC,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAIH,mCAAY,GAAZ,UAAa,OAA6B;QACxC,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAKH,6CAAsB,GAAtB;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAKH,4CAAqB,GAArB;QACE,MAAM,CAAC;IACT,CAAC;IAQH,mBAAC;AAAD,CAxFA,AAwFC,CAxFiC,iBAAiB,GAwFlD;AANM,uBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,2BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AAjFA;IADC,eAAe;;yDACyB;AAOzC;IADC,eAAe;;yDACyB;AAOzC;IADC,eAAe;;yDACyB;AAUzC;IAHC,OAAO,CAAC;QACP,aAAa,EAAE,SAAS;KACzB,CAAC;;;;gDAGD;AAUD;IAHC,OAAO,CAAC;QACP,aAAa,EAAE,SAAS;KACzB,CAAC;;;;gDAGD;AAUD;IAHC,OAAO,CAAC;QACP,aAAa,EAAE,SAAS;KACzB,CAAC;;;;gDAGD;AAUD;IAJC,OAAO,CAAC;QACP,eAAe,EAAE,IAAI;QACrB,KAAK,EAAE,sBAAsB;KAC9B,CAAC;;;oCACwB,UAAU;0DAEnC;AAUD;IAJC,OAAO,CAAC;QACP,eAAe,EAAE,IAAI;QACrB,KAAK,EAAE,qBAAqB;KAC7B,CAAC;;;oCACuB,UAAU;yDAElC;AAhFU,YAAY;IARxB,MAAM,CAAC;QACN,UAAU,EAAE,cAAc;QAC1B,MAAM,EAAE,8BAA8B;QACtC,SAAS,EAAE,0BAA0B;QACrC,IAAI,EAAE,wDAAwD;QAC9D,SAAS,EAAE,CAAC,SAAS,EAAE,eAAe,EAAE,SAAS,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE,eAAe,CAAC;KAChG,CAAC;GAEW,YAAY,CAwFxB;SAxFY,YAAY","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, CordovaProperty, Plugin, IonicNativePlugin } from '@ionic-native/core';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\ndeclare const navigator: any;\r\n\r\nexport interface MediaFile {\r\n  /**\r\n   * The name of the file, without path information.\r\n   */\r\n  name: string;\r\n  /**\r\n   * The full path of the file, including the name.\r\n   */\r\n  fullPath: string;\r\n  /**\r\n   * The file's mime type\r\n   */\r\n  type: string;\r\n\r\n  /**\r\n   * The date and time when the file was last modified.\r\n   */\r\n  lastModifiedDate: Date;\r\n\r\n  /**\r\n   * The size of the file, in bytes.\r\n   */\r\n  size: number;\r\n\r\n  /**\r\n   * Retrieves the format information of the media file.\r\n   * @param {Function} successCallback\r\n   * @param {Function} errorCallback\r\n   */\r\n  getFormatData(successCallback: (data: MediaFileData) => any, errorCallback?: (err: any) => any): void;\r\n}\r\n\r\nexport interface MediaFileData {\r\n  /**\r\n   * The actual format of the audio and video content.\r\n   */\r\n  codecs: string;\r\n  /**\r\n   * The average bitrate of the content. The value is zero for images.\r\n   */\r\n  bitrate: number;\r\n  /**\r\n   * The height of the image or video in pixels. The value is zero for audio clips.\r\n   */\r\n  height: number;\r\n  /**\r\n   * The width of the image or video in pixels. The value is zero for audio clips.\r\n   */\r\n  width: number;\r\n  /**\r\n   * The length of the video or sound clip in seconds. The value is zero for images.\r\n   */\r\n  duration: number;\r\n}\r\n\r\nexport interface CaptureError {\r\n  code: string;\r\n}\r\n\r\nexport interface CaptureAudioOptions {\r\n  /**\r\n   * Maximum number of audio clips. Defaults to 1.\r\n   * On iOS you can only record one file.\r\n   */\r\n  limit?: number;\r\n  /**\r\n   * Maximum duration of an audio sound clip, in seconds. This does not work on Android devices.\r\n   */\r\n  duration?: number;\r\n}\r\n\r\nexport interface CaptureImageOptions {\r\n  /**\r\n   * Maximum number of images to capture. This limit is not supported on iOS, only one image will be taken per invocation.\r\n   */\r\n  limit?: number;\r\n}\r\n\r\nexport interface CaptureVideoOptions {\r\n  /**\r\n   * Maximum number of video clips to record. This value is ignored on iOS, only one video clip can be taken per invocation.\r\n   */\r\n  limit?: number;\r\n  /**\r\n   * Maximum duration per video clip. This will be ignored on BlackBerry.\r\n   */\r\n  duration?: number;\r\n  /**\r\n   * Quality of the video. This parameter can only be used with Android.\r\n   */\r\n  quality?: number;\r\n}\r\n\r\nexport interface ConfigurationData {\r\n  /**\r\n   * The ASCII-encoded lowercase string representing the media type.\r\n   */\r\n    type: string;\r\n  /**\r\n   * The height of the image or video in pixels. The value is zero for sound clips.\r\n   */\r\n  height: number;\r\n  /**\r\n   * The width of the image or video in pixels. The value is zero for sound clips.\r\n   */\r\n  width: number;\r\n}\r\n\r\n/**\r\n * @name Media Capture\r\n * @description\r\n * @usage\r\n * ```typescript\r\n * import { MediaCapture, MediaFile, CaptureError, CaptureImageOptions } from '@ionic-native/media-capture';\r\n *\r\n *\r\n * constructor(private mediaCapture: MediaCapture) { }\r\n *\r\n * ...\r\n *\r\n *\r\n * let options: CaptureImageOptions = { limit: 3 };\r\n * this.mediaCapture.captureImage(options)\r\n *   .then(\r\n *     (data: MediaFile[]) => console.log(data),\r\n *     (err: CaptureError) => console.error(err)\r\n *   );\r\n *\r\n * ```\r\n * @interfaces\r\n * MediaFile\r\n * MediaFileData\r\n * CaptureError\r\n * CaptureAudioOptions\r\n * CaptureImageOptions\r\n * CaptureVideoOptions\r\n * ConfigurationData\r\n */\r\n@Plugin({\r\n  pluginName: 'MediaCapture',\r\n  plugin: 'cordova-plugin-media-capture',\r\n  pluginRef: 'navigator.device.capture',\r\n  repo: 'https://github.com/apache/cordova-plugin-media-capture',\r\n  platforms: ['Android', 'BlackBerry 10', 'Browser', 'iOS', 'Ubuntu', 'Windows', 'Windows Phone']\r\n})\r\n\r\nexport class MediaCapture extends IonicNativePlugin {\r\n  /**\r\n   * The recording image sizes and formats supported by the device.\r\n   * @returns {ConfigurationData[]}\r\n   */\r\n  @CordovaProperty\r\n  supportedImageModes: ConfigurationData[];\r\n\r\n  /**\r\n   * The audio recording formats supported by the device.\r\n   * @returns {ConfigurationData[]}\r\n   */\r\n  @CordovaProperty\r\n  supportedAudioModes: ConfigurationData[];\r\n\r\n  /**\r\n   * The recording video resolutions and formats supported by the device.\r\n   * @returns {ConfigurationData[]}\r\n   */\r\n  @CordovaProperty\r\n  supportedVideoModes: ConfigurationData[];\r\n\r\n  /**\r\n   * Start the audio recorder application and return information about captured audio clip files.\r\n   * @param options\r\n   * @returns {Promise<MediaFile[]>}\r\n   */\r\n  @Cordova({\r\n    callbackOrder: 'reverse'\r\n  })\r\n  captureAudio(options?: CaptureAudioOptions): Promise<MediaFile[] | CaptureError> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Start the camera application and return information about captured image files.\r\n   * @param options\r\n   * @returns {Promise<MediaFile[]>}\r\n   */\r\n  @Cordova({\r\n    callbackOrder: 'reverse'\r\n  })\r\n  captureImage(options?: CaptureImageOptions): Promise<MediaFile[] | CaptureError> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Start the video recorder application and return information about captured video clip files.\r\n   * @param options\r\n   * @returns {Promise<MediaFile[]>}\r\n   */\r\n  @Cordova({\r\n    callbackOrder: 'reverse'\r\n  })\r\n  captureVideo(options?: CaptureVideoOptions): Promise<MediaFile[] | CaptureError> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * is fired if the capture call is successful\r\n   * @returns {Observable<MediaFile[]>}\r\n   */\r\n  @Cordova({\r\n    eventObservable: true,\r\n    event: 'pendingcaptureresult'\r\n  })\r\n  onPendingCaptureResult(): Observable<MediaFile[]> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * is fired if the capture call is unsuccessful\r\n   * @returns {Observable<CaptureError>}\r\n   */\r\n  @Cordova({\r\n    eventObservable: true,\r\n    event: 'pendingcaptureerror'\r\n  })\r\n  onPendingCaptureError(): Observable<CaptureError> {\r\n    return;\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}